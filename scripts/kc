#!/bin/bash

#=======================================================================
#  _  __               _           _       
# | |/ /___ _   _  ___| |__    __ (_)_ __  
# | ' // _ \ | |  / __| '_ \ / _` | | '_ \ 
# | . \  __/ |_| | (__| | | | (_| | | | | |
# |_|\_\___|\__, |\___|_| |_|\__,_|_|_| |_|
#           |___/                          
#
# Keychain CLI utility for managing credentials securely
# Maintainer: Facundo Torraca
#=======================================================================

# =======================================================================
# IMPORTS
# =======================================================================

. "$HOME/Documents/dotfiles/utils/log.sh"

# =======================================================================
# CONFIGURATION
# =======================================================================

# Get keychain name from environment variable
KEYCHAIN_NAME="${CUSTOM_KEYCHAIN_NAME:-}"
KEYCHAIN_PATH=""  # Will be set after determining the keychain name
KEYCHAIN_TIMEOUT=43200  # Lock after 12 hours of inactivity (in seconds)

# =======================================================================
# INTERNAL FUNCTIONS
# =======================================================================

# Check if keychain exists
_check_keychain_exists() {
    if ! security list-keychains | grep -q "$KEYCHAIN_PATH"; then
        return 1
    fi
    return 0
}

# Check if keychain is unlocked
_check_keychain_unlocked() {
    if security show-keychain-info "$KEYCHAIN_PATH" &>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Ask for keychain name if not set in environment variable
_ask_for_keychain() {
    # If keychain name is not set from env var, ask user
    if [ -z "$KEYCHAIN_NAME" ]; then
        echo -n "Enter keychain name: "
        read user_keychain
        
        if [ -z "$user_keychain" ]; then
            log_error "No keychain name provided. Exiting."
            exit 1
        fi
        
        KEYCHAIN_NAME="$user_keychain"
    fi
    
    # Set the keychain path now that we have a name
    KEYCHAIN_PATH="$HOME/Library/Keychains/$KEYCHAIN_NAME"
}

# =======================================================================
# COMMANDS
# =======================================================================

# Display help information showing available commands and options
cmd_help() {
    log_info "Usage: $(basename $0) <command> [options]"
    log_info ""
    log_info "Commands:"
    log_info "  create            Create the custom keychain"
    log_info "  unlock            Unlock the keychain"
    log_info "  lock              Lock the keychain"
    log_info "  status            Check keychain status"
    log_info "  add <svc> <acc>   Add or update a credential"
    log_info "  rm <svc> <acc>    Remove a credential"
    log_info "  get <svc> <acc>   Get a credential value"
    log_info "  list              List all services in the keychain"
    log_info "  delete            Delete the entire keychain (with confirmation)"
    log_info "  help              Show this help message"
    log_info ""
    log_info "Environment Variables:"
    log_info "  CUSTOM_KEYCHAIN_NAME  Set a custom keychain name"
    log_info ""
    log_info "Current Keychain: $KEYCHAIN_NAME"
    log_info "Path: $KEYCHAIN_PATH"
}

# Create a custom keychain
cmd_create() {
    local password="$1"
    
    _ask_for_keychain
    
    if _check_keychain_exists; then
        log_warning "Keychain $KEYCHAIN_NAME already exists"
        return 0
    fi
    
    if [ -z "$password" ]; then
        echo -n "Enter password for new keychain: "
        read -s password
        echo
    fi
    
    log_info "Creating keychain $KEYCHAIN_NAME..."
    security create-keychain -p "$password" "$KEYCHAIN_PATH" || log_error "Failed to create keychain"
    security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | xargs)
    
    # Set keychain settings - auto-lock after specified timeout
    security set-keychain-settings -lut $KEYCHAIN_TIMEOUT "$KEYCHAIN_PATH"
    log_success "Keychain created and configured successfully"
}

# Check keychain status
cmd_status() {
    _ask_for_keychain
    
    if ! _check_keychain_exists; then
        log_info "Status: Keychain does not exist"
        return 1
    fi
    
    if _check_keychain_unlocked; then
        log_success "Status: Keychain exists and is unlocked"
    else
        log_warning "Status: Keychain exists but is locked"
        return 1
    fi
    
    return 0
}

# Unlock the custom keychain
cmd_unlock() {
    local password="$1"
    
    _ask_for_keychain
    
    if ! _check_keychain_exists; then
        log_error "Keychain $KEYCHAIN_NAME does not exist. Use 'create' command first"
        return 1
    fi
    
    if _check_keychain_unlocked; then
        log_info "Keychain is already unlocked"
        return 0
    fi
    
    if [ -z "$password" ]; then
        echo -n "Enter keychain password: "
        read -s password
        echo
    fi
    
    security unlock-keychain -p "$password" "$KEYCHAIN_PATH" || log_error "Failed to unlock keychain"
    log_success "Keychain unlocked successfully"
}

# Lock the keychain
cmd_lock() {
    _ask_for_keychain
    
    if ! _check_keychain_exists; then
        log_error "Keychain $KEYCHAIN_NAME does not exist"
        return 1
    fi
    
    security lock-keychain "$KEYCHAIN_PATH"
    log_success "Keychain locked successfully"
}

# Add or update a credential in the keychain
cmd_add() {
    local service="$1"
    local account="$2"
    local value="$3"
    
    _ask_for_keychain
    
    if [ -z "$service" ] || [ -z "$account" ]; then
        log_error "Usage: kc add <service> <account> [value]"
        return 1
    fi
    
    # Check if keychain exists and is unlocked
    if ! _check_keychain_exists; then
        log_error "Keychain $KEYCHAIN_NAME does not exist. Use 'create' command first"
        return 1
    fi
    
    if ! _check_keychain_unlocked; then
        log_error "Keychain is locked. Use 'unlock' command first"
        return 1
    fi
    
    if [ -z "$value" ]; then
        echo -n "Enter value for $service/$account: "
        read -s value
        echo
    fi
    
    # Check if credential exists and delete it first
    security delete-generic-password -s "$service" -a "$account" "$KEYCHAIN_PATH" 2>/dev/null
    
    # Add the new credential
    security add-generic-password -s "$service" -a "$account" -w "$value" "$KEYCHAIN_PATH" || \
        log_error "Failed to add credential"
        
    log_success "Credential '$service/$account' added to keychain"
}

# Remove a credential from the keychain
cmd_rm() {
    local service="$1"
    local account="$2"
    
    _ask_for_keychain
    
    if [ -z "$service" ] || [ -z "$account" ]; then
        log_error "Usage: kc rm <service> <account>"
        return 1
    fi
    
    # Check if keychain exists and is unlocked
    if ! _check_keychain_exists; then
        log_error "Keychain $KEYCHAIN_NAME does not exist"
        return 1
    fi
    
    if ! _check_keychain_unlocked; then
        log_error "Keychain is locked. Use 'unlock' command first"
        return 1
    fi
    
    # Check if the credential exists first
    if ! security find-generic-password -s "$service" -a "$account" "$KEYCHAIN_PATH" &>/dev/null; then
        log_error "Credential '$service/$account' not found in keychain"
        return 1
    fi
    
    # Confirm deletion
    read -p "Are you sure you want to delete credential '$service/$account'? (y/N): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        log_info "Deletion cancelled"
        return 0
    fi
    
    # Delete the credential
    security delete-generic-password -s "$service" -a "$account" "$KEYCHAIN_PATH" || \
        log_error "Failed to remove credential"
        
    log_success "Credential '$service/$account' removed from keychain"
}

# Get a credential from the keychain
cmd_get() {
    local service="$1"
    local account="$2"
    
    _ask_for_keychain
    
    if [ -z "$service" ] || [ -z "$account" ]; then
        log_error "Usage: kc get <service> <account>"
        return 1
    fi
    
    # Check if keychain exists and is unlocked
    if ! _check_keychain_exists; then
        log_error "Keychain $KEYCHAIN_NAME does not exist"
        return 1
    fi
    
    if ! _check_keychain_unlocked; then
        log_error "Keychain is locked. Use 'unlock' command first"
        return 1
    fi
    
    local value=$(security find-generic-password -s "$service" -a "$account" -w "$KEYCHAIN_PATH" 2>/dev/null)
    
    if [ -z "$value" ]; then
        log_error "No credential found for $service/$account"
        return 1
    fi
    
    echo "$value"
}

# List all services in the keychain
cmd_list() {
    _ask_for_keychain
    
    # Check if keychain exists and is unlocked
    if ! _check_keychain_exists; then
        log_error "Keychain $KEYCHAIN_NAME does not exist"
        return 1
    fi
    
    if ! _check_keychain_unlocked; then
        log_error "Keychain is locked. Use 'unlock' command first"
        return 1
    fi
    
    log_info "Services in keychain:"
    
    local services=$(security dump-keychain "$KEYCHAIN_PATH" | grep -i "svce" | sort | uniq | sed 's/.*<blob>=\"\(.*\)\".*/\1/')
    
    if [ -z "$services" ]; then
        log_warning "No services found in keychain"
        return 0
    fi
    
    echo "$services" | while read service; do
        log_info "  - $service"
    done
}

# Delete the entire keychain with double confirmation
cmd_delete() {
    _ask_for_keychain
    
    if ! _check_keychain_exists; then
        log_error "Keychain $KEYCHAIN_NAME does not exist"
        return 1
    fi
    
    # First confirmation
    log_warning "WARNING: You are about to delete the entire keychain '$KEYCHAIN_NAME'"
    log_warning "This will permanently remove all credentials stored in this keychain."
    read -p "Are you sure you want to delete this keychain? (y/N): " confirm1
    
    if [[ ! "$confirm1" =~ ^[Yy]$ ]]; then
        log_info "Deletion cancelled"
        return 0
    fi
    
    # Second confirmation
    read -p "Type the keychain name '$KEYCHAIN_NAME' to confirm deletion: " confirm2
    if [ "$confirm2" != "$KEYCHAIN_NAME" ]; then
        log_error "Keychain name doesn't match. Deletion aborted."
        return 1
    fi
    
    # First remove from keychain list
    security list-keychains -d user -s $(security list-keychains -d user | tr -d '"' | grep -v "$KEYCHAIN_PATH")
    
    # Delete the keychain
    security delete-keychain "$KEYCHAIN_PATH" || log_error "Failed to delete keychain"
    log_success "Keychain deleted successfully"
}

# =======================================================================
# MAIN
# =======================================================================

# Main command router
main() {
    case "$1" in
        create)
            shift
            cmd_create "$@"
            ;;
        status)
            cmd_status
            ;;
        unlock)
            shift
            cmd_unlock "$@"
            ;;
        lock)
            cmd_lock
            ;;
        add)
            shift
            cmd_add "$@"
            ;;
        rm)
            shift
            cmd_rm "$@"
            ;;
        get)
            shift
            cmd_get "$@"
            ;;
        list)
            cmd_list
            ;;
        delete)
            cmd_delete
            ;;
        help|--help|-h)
            cmd_help
            ;;
        *)
            log_error "Unknown command: $1"
            cmd_help
            exit 1
            ;;
    esac
}

# If this script is being executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # If no arguments, show help
    if [ $# -eq 0 ]; then
        cmd_help
        exit 1
    fi
    
    main "$@"
fi

exit 0